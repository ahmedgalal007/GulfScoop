@using DAL.Database;

@model Tournament

@{
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<div>
    <h1>Create Tournament</h1>
</div>

<form method="post" action="/soccer/admin/tournament/create">
    <input type="hidden" id="Id" name="Id" value="0" />
    <div class="form-group">
        <label for="Name">Name</label>
        <input type="text" class="form-control" id="Name" name="Name" aria-describedby="NameHelp" placeholder="Tournament Name">
        <small id="NameHelp" class="form-text text-muted">Enter the Tournament name.</small>
    </div>
    <fieldset id="PlaceType">
        @foreach (int item in Enum.GetValues(typeof(PlaceType)))
        {
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" name="PlaceType" value="@item" data-text="@Enum.GetName(typeof(PlaceType), item)">
                <label class="form-check-label" for="PlaceType">
                    @Enum.GetName(typeof(PlaceType), item);
                </label>
            </div>
        }
    </fieldset>
    <div class="form-group">
        <input type="hidden" name="Place"/>
        <label for="Place">Place</label>
        <input type="text" class="form-control" id="Place" aria-describedby="PlaceHelp" placeholder="Tournament Place" style="width:100%;" value="">
        <small id="PlaceHelp" class="form-text text-muted">Enter the Place name.</small>
    </div>
    <div class="form-group">
        <input type="hidden" name="Organizer" />
        <label for="Organizer">Organizer</label>
        <input type="text" class="form-control" id="Organizer" aria-describedby="OrganizerHelp" placeholder="Organizer Name">
        <small id="OrganizerHelp" class="form-text text-muted">Enter the Organizer name.</small>
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</form>

<script>

    $(document).ready(function () {
        var autoCompeleteScheme = {
            model: {
                fields: {
                    Name: { type: "string" },
                    ID: { type: "number" }
                },
                id: "ID",
            },
        };

        $('input:radio[name="PlaceType"]').change(function () {
            if ($(this).is(':checked')) {
                console.log($(this).data("text"));
                $("#Place").data("kendoAutoComplete").dataSource.transport.options.read.url = "/AutoCompelete/Place_" + $(this).data("text");
            }
            console.log($("#Place").val());
        });

        $("#Place").kendoAutoComplete({

            dataTextField: 'Name',
            filter: "contains",
            minLength: 3,
            template: "#= ID# | #= Name#",
            virtual: true,
            select: function (e) { 
                $('input:hidden[name="Place"]').val(this.dataItem(e.item.index()).id);
                // $("#Place").val(this.dataItem(e.item.index()).id);
            },
            dataSource: {
                schema: autoCompeleteScheme,
                type: "json",
                serverFiltering: true,
                transport: {
                    parameterMap: function(_data, type){
                        // if type is "read", then data is { foo: 1 }, we also want to add { "bar": 2 }
                        if (type) { }
                        _data = {};
                        return { filter: $("#Place").val() };
                    },
                    prefix: "",
                    dataType:"json",
                    read: "/AutoCompelete/Place_"
                }
            },
            delay: 500,
        });

        $("#Organizer").kendoAutoComplete({

            dataTextField: 'Name',
            filter: "contains",
            minLength: 3,
            template: "#= ID# | #= Name#",
            virtual: true,
            select: function (e) { 
                $('input:hidden[name="Place"]').val(this.dataItem(e.item.index()).id);
                // $("#Place").val(this.dataItem(e.item.index()).id);
            },
            dataSource: {
                schema: autoCompeleteScheme,
                type: "json",
                serverFiltering: true,
                transport: {
                    parameterMap: function(_data, type){
                        // if type is "read", then data is { foo: 1 }, we also want to add { "bar": 2 }
                        if (type) { }
                        _data = {};
                        return { filter: $("#Place").val() };
                    },
                    prefix: "",
                    dataType:"json",
                    read: "/AutoCompelete/Organizer"
                }
            },
            delay: 500,
        });
    });
</script>